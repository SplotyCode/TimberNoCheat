package me.david.timbernocheat.checkes.exploits;

import me.david.timbernocheat.checkmanager.Category;
import me.david.timbernocheat.checkmanager.Check;
import me.david.timbernocheat.TimberNoCheat;
import net.minecraft.server.v1_8_R3.*;
import org.bukkit.craftbukkit.v1_8_R3.inventory.CraftItemStack;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.player.PlayerEditBookEvent;
import org.bukkit.inventory.ItemStack;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;
import java.util.Set;

public class Book extends Check {

    public Book(){
        super("Book_JSON", Category.EXPLOITS);
    }

    private final Set<ChatClickable.EnumClickAction> filterActions = EnumSet.of(ChatClickable.EnumClickAction.RUN_COMMAND, ChatClickable.EnumClickAction.OPEN_FILE, ChatClickable.EnumClickAction.OPEN_URL, ChatClickable.EnumClickAction.SUGGEST_COMMAND);

    @EventHandler(priority=EventPriority.LOWEST)
    public void onBookEdit(final PlayerEditBookEvent event) {
        final Player player = event.getPlayer();
        if(!TimberNoCheat.checkmanager.isvalid_create(player)) return;
        if (!event.isCancelled() && filterBook(player.getInventory().getItem(event.getSlot()))) {
            if(updateVio(this, event.getPlayer(), 1)) event.setCancelled(true);
        }

        try {
            event.getNewBookMeta().getTitle().getBytes("UTF-8");
        }catch (UnsupportedEncodingException ex){
            if( updateVio(this, event.getPlayer(), 1, " §6CHECK: §bCHARATERSPAGE"))
                event.setCancelled(true);
        }

        for(final String page : event.getNewBookMeta().getPages()){
            try {
                page.getBytes("UTF-8");
            }catch (UnsupportedEncodingException ex){
                updateVio(this, event.getPlayer(), 1, " §6CHECK: §bCHARATERSPAGE");
                event.setCancelled(true);
            }
        }
    }

    private boolean filterBook(ItemStack filterItem) {
        return filterBook(CraftItemStack.asNMSCopy(filterItem));
    }
    private boolean filterBook(Object filterItem) {
        net.minecraft.server.v1_8_R3.ItemStack mcStack = (net.minecraft.server.v1_8_R3.ItemStack)filterItem;
        try {
            NBTTagCompound tag = (mcStack = mcStack.cloneItemStack()).hasTag() ? mcStack.getTag() : null;
            NBTTagList pages = tag != null && tag.hasKeyOfType("pages", 9) ? tag.getList("pages", 8) : null;
            for (int i = 0; pages != null && i < pages.size(); ++i) {
                String jsonPage = pages.getString(i);
                IChatBaseComponent component = IChatBaseComponent.ChatSerializer.a(jsonPage);
                ArrayList<IChatBaseComponent> subComponents = new ArrayList<IChatBaseComponent>();
                addComponents(component, subComponents);
                for (IChatBaseComponent subComponent : subComponents) {
                    ChatModifier modifier = subComponent.getChatModifier();
                    ChatClickable clickable = modifier.h();
                    if (clickable == null || !this.filterActions.contains(clickable.a())) continue;
                    return true;
                }
                jsonPage = IChatBaseComponent.ChatSerializer.a(component);
                pages.a(i, new NBTTagString(jsonPage));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    private void addComponents(IChatBaseComponent component, List<IChatBaseComponent> list) {
        if (component != null) {
            list.add(component);
            List<IChatBaseComponent> children = component.a();
            if (children != null) {
                for (IChatBaseComponent child : children) {
                    addComponents(child, list);
                }
            }
        }
    }
}
