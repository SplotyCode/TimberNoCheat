package me.david.timbernocheat.checkes.exploits;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.utility.StreamSerializer;
import com.comphenix.protocol.wrappers.nbt.NbtCompound;
import com.comphenix.protocol.wrappers.nbt.NbtFactory;
import com.comphenix.protocol.wrappers.nbt.NbtList;
import comphenix.packetwrapper.WrapperPlayClientSetCreativeSlot;
import io.netty.buffer.ByteBuf;
import me.david.timbernocheat.TimberNoCheat;
import me.david.timbernocheat.checkbase.Category;
import me.david.timbernocheat.checkbase.Check;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.PotionMeta;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.Map;

public class NBT extends Check {

    private final boolean nonbt;
    private final boolean noitem;
    private final boolean nopages;
    private final int toomanypahes;
    private final int toolongtext;
    private final boolean enchants;
    private final boolean potions;

    public NBT(){
        super("NBT", Category.EXPLOITS);
        nonbt = getBoolean("nonbt");
        noitem = getBoolean("noitem");
        nopages = getBoolean("nopages");
        toomanypahes = getInt("toomanypahes");
        toolongtext = getInt("toolongtext");
        enchants = getBoolean("enchants");
        potions = getBoolean("potions");

        register(new PacketAdapter(TimberNoCheat.getInstance(), PacketType.Play.Client.CUSTOM_PAYLOAD) {
            @Override
            public void onPacketReceiving(PacketEvent event) {
                if(!TimberNoCheat.getCheckManager().isvalid_create(event.getPlayer())){
                    return;
                }
                String name = event.getPacket().getStrings().readSafely(0);
                if(name.equals("REGISTER")){
                    Channels.check(event);
                }
                if (!"MC|BSign".equals(name) && !"MC|BEdit".equals(name))
                    return;
                check(event);
                Packet_Flood.check(event);
            }
        });

        register(new PacketAdapter(TimberNoCheat.getInstance(), PacketType.Play.Client.SET_CREATIVE_SLOT) {
            @Override
            public void onPacketReceiving(PacketEvent event) {
                if(!TimberNoCheat.getCheckManager().isvalid_create(event.getPlayer())) return;
                WrapperPlayClientSetCreativeSlot packet = new WrapperPlayClientSetCreativeSlot(event.getPacket());
                ItemStack is = packet.getClickedItem();
                if(potions && checkPotion(is)) updateVio(NBT.this, event.getPlayer(), 1, " §6CHECK: §bPOTION");
                if(enchants && checkEnchant(is)) updateVio(NBT.this, event.getPlayer(), 1, " §6CHECK: §bENCHANTMENT");
            }
        });
    }

    private boolean checkEnchant(ItemStack is){
        if (is.getEnchantments() != null)
            for (Map.Entry<Enchantment, Integer> en : is.getEnchantments().entrySet())
                if (en.getKey().getMaxLevel() < en.getValue())
                    return true;
        return false;
    }

    private boolean checkPotion(ItemStack is) {
        return is.hasItemMeta() && is.getItemMeta() instanceof PotionMeta && ((PotionMeta) is.getItemMeta()).getCustomEffects().size() >= 2;
    }
    private void check(PacketEvent event){
        PacketContainer container = event.getPacket();
        ByteBuf buffer = container.getSpecificModifier(ByteBuf.class).read(0).copy();

        byte[] bytes = new byte[buffer.readableBytes()];
        buffer.readBytes(bytes);

        try {
            DataInputStream inputStream = new DataInputStream(new ByteArrayInputStream(bytes));
            ItemStack itemStack = StreamSerializer.getDefault().deserializeItemStack(inputStream);
            if (itemStack == null){
                if(!noitem)return;
                if(updateVio(this, event.getPlayer(), 1, " §6CHECK: §bNOITEM"))
                    event.setCancelled(true);
                return;
            }
            NbtCompound root = (NbtCompound) NbtFactory.fromItemTag(itemStack);
            if (root == null) {
                if(!nonbt)return;
                if(updateVio(this, event.getPlayer(), 1, " §6CHECK: §bNONBT"))
                    event.setCancelled(true);
                return;
            }
            if (!root.containsKey("pages")) {
                if(!nopages)return;
                if(updateVio(this, event.getPlayer(), 1, " §6CHECK: §bNOPASGES"))
                    event.setCancelled(true);
                return;
            }
            NbtList<String> pages = root.getList("pages");
            if (root.getList("pages").size() > toomanypahes && toomanypahes != -1){
                if(updateVio(this, event.getPlayer(), 1, " §6CHECK: §bTOOMUCHPAGES"))
                    event.setCancelled(true);
                return;
            }
            if(toolongtext == -1)
                return;
            for (String page : pages)
                if (page.length() > toolongtext) {
                    if(updateVio(this, event.getPlayer(), 1, " §6CHECK: §bTOOLONGLENGHT"))
                        event.setCancelled(true);
                    return;
                }
        }catch (IOException ex){
            ex.printStackTrace();
        }finally {
            buffer.release();
        }
    }
}
